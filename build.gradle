import io.papermc.paperweight.userdev.ReobfArtifactConfiguration

plugins {
    id 'java'
    id 'io.github.goooler.shadow' version '8.1.7'
    id 'io.papermc.paperweight.userdev' version '1.7.1'
}

group = 'github.moriyoshi'
version = '2.0.0'

repositories {
    mavenCentral()
    maven { url = 'https://oss.sonatype.org/content/groups/public/' }
    maven { url = 'https://repo.codemc.org/repository/maven-public/' }
    maven { url = 'https://libraries.minecraft.net' }
    maven { url = 'https://maven.maxhenkel.de/repository/public' }
}

def anvilGUI = 'net.wesjd:anvilgui:1.9.4-SNAPSHOT'
def commandAPI = 'dev.jorel:commandapi-bukkit-shade:9.4.2'
def nbtAPI = 'de.tr7zw:item-nbt-api:2.12.4'
def reflections = 'org.reflections:reflections:0.10.2'
def fastBoard = 'fr.mrmicky:fastboard:2.1.2'

def relocates = [
        'dev.jorel.commandapi'    : 'github.moriyoshi.comminiplugin.dependencies.commandapi',
        'net.wesjd.anvilgui'      : 'github.moriyoshi.comminiplugin.dependencies.anvilgui',
        'de.tr7zw.changeme.nbtapi': 'github.moriyoshi.comminiplugin.dependencies.nbtapi',
        'org.reflections'         : 'github.moriyoshi.comminiplugin.dependencies.reflections',
        'fr.mrmicky.fastboard'    : 'github.moriyoshi.comminiplugin.dependencies.reflections'
]

def lombok = 'org.projectlombok:lombok:1.18.32'

// paperweight.reobfArtifactConfiguration = ReobfArtifactConfiguration.Companion.MOJANG_PRODUCTION

dependencies {
    paperweight.paperDevBundle("1.20.6-R0.1-SNAPSHOT")

    compileOnly lombok
    annotationProcessor lombok

    testCompileOnly lombok
    testAnnotationProcessor lombok

    shadow reflections
    shadow anvilGUI
    shadow commandAPI
    shadow nbtAPI
    shadow fastBoard
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

shadowJar {
    configurations = [project.configurations.shadow]

    relocates.each { originalPackage, relocatedPackage -> relocate originalPackage, relocatedPackage }
}

tasks.register('copyPlugin') {
    dependsOn reobfJar
    doLast {
        if (file("./build/libs/ComMiniPlugin-${version}.jar").exists()) {
            if (file('./copy.bat').exists()) {
                exec {
                    workingDir '.'
                    executable './copy.bat'
                    args "${version}"
                }
            } else {
                if (file('./copy.sh').exists()) {
                    exec {
                        workingDir '.'
                        executable './copy.sh'
                        args "${version}"
                    }
                } else {
                    println("not found bat and sh file")
                }
            }
        } else {
            println("please build")
        }
    }
}


tasks.register('runPlugin') {
    dependsOn reobfJar
    doLast {
        if (file("./build/libs/ComMiniPlugin-${version}.jar").exists()) {
            if (file('./copy.bat').exists()) {
                exec {
                    workingDir '.'
                    executable './copy.bat'
                    args "${version}", '--server'
                }
            } else {
                if (file('./copy.sh').exists()) {
                    exec {
                        workingDir '.'
                        executable './copy.sh'
                        args "${version}", '--server'
                    }
                } else {
                    println("not found bat and sh file")
                }
            }
        } else {
            println("please build")
        }
    }
}
